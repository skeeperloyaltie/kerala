
  // Populate Appointments Table
  // function populateAppointmentsTable(appointments, date, filter = 'all') {
  //   const $tbody = $('.table-appointments tbody');
  //   $tbody.empty();

  //   console.log(`üì• Processing appointments for ${date}, filter: ${filter}`);

  //   let appointmentsArray = [];
  //   if (Array.isArray(appointments)) {
  //     appointmentsArray = appointments;
  //   } else if (appointments && typeof appointments === 'object') {
  //     if (Array.isArray(appointments.appointments)) {
  //       appointmentsArray = appointments.appointments;
  //     } else if (Array.isArray(appointments.results)) {
  //       appointmentsArray = appointments.results;
  //     } else if (!Array.isArray(appointments)) {
  //       appointmentsArray = [appointments];
  //     }
  //   } else {
  //     console.warn(`‚ö†Ô∏è Appointments data is not an array or valid object:`, appointments);
  //   }

  //   // Filter appointments by exact date
  //   appointmentsArray = appointmentsArray.filter(appt => {
  //     if (!appt || !appt.appointment_date) return false;
  //     const apptDate = new Date(appt.appointment_date);
  //     const apptDateStr = `${apptDate.getFullYear()}-${String(apptDate.getMonth() + 1).padStart(2, '0')}-${String(apptDate.getDate()).padStart(2, '0')}`;
  //     return apptDateStr === date;
  //   });

  //   // Map filter to statuses
  //   const statusMap = {
  //     'all': ['booked', 'arrived', 'on-going', 'reviewed'],
  //     'booked': ['booked'],
  //     'arrived': ['arrived'],
  //     'on-going': ['on-going'],
  //     'reviewed': ['reviewed']
  //   };
  //   const allowedStatuses = statusMap[filter.toLowerCase()] || statusMap['all'];

  //   // Filter appointments by status
  //   appointmentsArray = appointmentsArray.filter(appt => {
  //     if (!appt || !appt.status) return false;
  //     return allowedStatuses.includes(appt.status.toLowerCase());
  //   });

  //   if (!appointmentsArray.length) {
  //     $tbody.append(`<tr><td colspan="8" class="text-center">No appointments found for ${date} (${filter})</td></tr>`);
  //     console.log(`‚ÑπÔ∏è No appointments to display for ${date} with filter ${filter}`);
  //     return;
  //   }

  //   const groupedByPatient = appointmentsArray.reduce((acc, appt) => {
  //     if (!appt || typeof appt !== 'object' || !appt.id || !appt.patient || !appt.patient.patient_id) {
  //       console.warn(`‚ö†Ô∏è Skipping invalid appointment at index ${appointmentsArray.indexOf(appt)}:`, appt);
  //       return acc;
  //     }
  //     const patientId = appt.patient.patient_id;
  //     if (!acc[patientId]) {
  //       acc[patientId] = {
  //         patient: appt.patient,
  //         appointments: []
  //       };
  //     }
  //     acc[patientId].appointments.push(appt);
  //     return acc;
  //   }, {});

  //   let patientIndex = 0;
  //   let totalAppointments = 0;
  //   const patientEntries = Object.entries(groupedByPatient).sort((a, b) => {
  //     const nameA = `${a[1].patient.first_name} ${a[1].patient.last_name || ''}`.toLowerCase();
  //     const nameB = `${b[1].patient.first_name} ${b[1].patient.last_name || ''}`.toLowerCase();
  //     return nameA.localeCompare(nameB);
  //   });

  //   if (!patientEntries.length) {
  //     $tbody.append(`<tr><td colspan="8" class="text-center">No valid appointments found for ${date} (${filter})</td></tr>`);
  //     console.log(`‚ÑπÔ∏è No valid appointments to display for ${date} with filter ${filter}`);
  //     return;
  //   }

  //   // Define STATUS_CHOICES aligned with Django model
  //   const STATUS_CHOICES = [
  //     { value: 'booked', label: 'Booked' },
  //     { value: 'arrived', label: 'Arrived' },
  //     { value: 'on-going', label: 'On-Going' },
  //     { value: 'reviewed', label: 'Reviewed' }
  //   ];

  //   patientEntries.forEach(([patientId, { patient, appointments }]) => {
  //     patientIndex++;
  //     appointments.sort((a, b) => new Date(a.appointment_date) - new Date(b.appointment_date));
  //     const patientName = patient.first_name
  //       ? `${patient.first_name} ${patient.last_name || ''}`
  //       : 'Unknown Patient';
  //     const $patientRow = $(`
  //       <tr class="patient-row" style="background-color: #f8f9fa;">
  //         <td>${patientIndex}</td>
  //         <td>${patientId}</td>
  //         <td colspan="6"><strong>${patientName}</strong></td>
  //       </tr>
  //     `);
  //     $tbody.append($patientRow);

  //     appointments.forEach((appt) => {
  //       const doctorName = appt.doctor && appt.doctor.first_name
  //         ? `${appt.doctor.first_name} ${appt.doctor.last_name || ''}`
  //         : 'N/A';
  //       const appointmentDate = appt.appointment_date
  //         ? new Date(appt.appointment_date)
  //         : null;
  //       const dateTimeStr = appointmentDate && !isNaN(appointmentDate)
  //         ? `${appointmentDate.getFullYear()}-${String(appointmentDate.getMonth() + 1).padStart(2, '0')}-${String(appointmentDate.getDate()).padStart(2, '0')} ${appointmentDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })}`
  //         : 'N/A';
  //       const statusClass = appt.status
  //         ? `status-${appt.status.toLowerCase().replace(' ', '-')}`
  //         : 'status-unknown';

  //       // Create status dropdown
  //       let statusOptions = STATUS_CHOICES.map(choice => 
  //         `<option value="${choice.value}" ${appt.status.toLowerCase() === choice.value ? 'selected' : ''}>${choice.label}</option>`
  //       ).join('');
  //       const $apptRow = $(`
  //         <tr class="appointment-row">
  //           <td></td>
  //           <td></td>
  //           <td></td>
  //           <td>${appt.id}</td>
  //           <td>${dateTimeStr}</td>
  //           <td class="status-cell">
  //             <select class="form-select form-select-sm status-select" data-appointment-id="${appt.id}" data-original-status="${appt.status}">
  //               ${statusOptions}
  //             </select>
  //           </td>
  //           <td>${doctorName}</td>
  //           <td>${appt.notes || 'N/A'}</td>
  //         </tr>
  //       `);
  //       $tbody.append($apptRow);
  //       totalAppointments++;

  //       if (!appt.patient || !appt.patient.first_name) {
  //         console.warn(`‚ö†Ô∏è Appointment ID ${appt.id} has incomplete patient data:`, appt.patient);
  //       }
  //       if (!appt.doctor) {
  //         console.warn(`‚ö†Ô∏è Appointment ID ${appt.id} has no doctor data:`, appt.doctor);
  //       }
  //     });
  //   });

  //   // Bind status change event
  //   $('.status-select').off('change').on('change', function () {
  //     const $select = $(this);
  //     const appointmentId = $select.data('appointment-id');
  //     const newStatus = $select.val();
  //     const $row = $select.closest('tr');
  //     console.log(`üñ±Ô∏è Status change for appointment ${appointmentId} to ${newStatus}`);
  //     updateAppointmentStatus(appointmentId, newStatus, $row, date);
  //   });

  //   console.log(`‚úÖ Populated appointments table with ${totalAppointments} appointments across ${patientEntries.length} patients for ${date} (${filter})`);
  // }

